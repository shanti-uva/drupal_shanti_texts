<?php 

define('SHANTI_TEXTS_PATH',drupal_get_path('module','shanti_texts'));
define('SHANTI_TEXTS_Q', $GLOBALS['_GET']['q']);

function shanti_texts_help($path, $arg) {
  if ($path == "admin/help#shanti_texts") {
    return '<p>' . t('SHANTI Texts help is not currently available.') . '</p>';
  }
}
  
function shanti_texts_enable() {
  drupal_set_message($message = t('SHANTI Texts activated.'), $type = 'status');
  drupal_theme_rebuild();
}

function shanti_texts_menu() {
  return array(
    'shanti_texts' => array(
      'page callback' => 'shanti_texts_default',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/voyant/%' => array(
      'page callback' => 'shanti_texts_voyant',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax/%' => array(
      'page callback' => 'shanti_texts_node_ajax',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax_text/%' => array(
      'page callback' => 'shanti_texts_node_ajax_text',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_embed/%' => array(
      'page callback' => 'shanti_texts_node_embed',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_json/%' => array(
      'page callback' => 'shanti_texts_node_json',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),    
    ),
  );
}

/**
* Menu Callbacks
*/

function shanti_texts_default() {
  drupal_goto("<front>"); // Redirect to front page
}

function shanti_texts_voyant($nid) {
  global $base_url;
  $url = "http://voyeurtools.org";
  drupal_goto($url,array('external' => TRUE,  'query' => array('input' => "$base_url/shanti_texts/node_ajax_text/$nid")));
}

function shanti_texts_node_ajax($nid) {
	drupal_goto("shanti_texts/node_embed/$nid");
}

function shanti_texts_node_ajax_text($nid) {
	$node = node_load($nid);
	$content = shanti_texts_get_whole_book($node->book);
	print $content[$nid];
}

function shanti_texts_node_embed($nid) {
	drupal_add_css(SHANTI_TEXTS_PATH . '/css/shanti_texts_embed.css');
  $node = node_load($nid);
  $build = node_view($node,'embed');
  return $build;
}

function shanti_texts_node_json($nid) {
  $node = node_load($nid);
  print ajax_render($node);
}

/**
 * This template is called by the visit function used by
 * book_export_traverse() use throughout the module
 */
function shanti_texts_theme($existing, $type, $theme, $path) {
  return array(
    'whole_node_html' => array(
      'variables' => array('node' => NULL, 'children' => NULL, 'editmenu' => NULL),
    ),
  );
}

function shanti_texts_menu_alter(&$items) { 
  $items['node/%node/reorder']['title'] = 'Sort Text Sections';
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'shanti_texts_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
}

function shanti_texts_edit_tab_title($node) {
  if ($node->type == 'book') {
    return t('Edit Top Text Section');
  }
  return t('Edit');
}

function shanti_texts_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'book_admin_edit') {
    $form['save']['#value'] = 'Save text sections';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';
  } 
  elseif ($form_id == 'book_node_form') {
    $form['actions']['submit']['#value']  = 'Save text section';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';  
  }
  
  // CANCEL BUTTONS
  if (!isset($node->nid) || isset($node->is_new)) {
    $destination = 'node/add';
  }
  else {
    $destination = "node/{$node->nid}";
  }
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), $destination),
    '#weight' => 20,
  );
  
}

function shanti_texts_book_submit_callback($form, &$form_state) {
  // Hack? At least check of bid exists ...
  $bid = $form_state['build_info']['args'][0]->book['bid']; 
  shanti_texts_clear_cache_text($bid);  
}

function shanti_texts_clear_cache_text($bid) {
    cache_clear_all('shanti_texts_data_book' . $bid, 'cache');
    cache_clear_all('shanti_texts_data_toc' . $bid, 'cache');
    drupal_set_message("All caches cleared for this text.");
}

function shanti_texts_node_insert($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid']);
  }  
}

function shanti_texts_node_update($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid']);
  }
}

function shanti_texts_node_delete($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid']);
  }
}

function theme_whole_node_html($vars) {
	$depth    = $vars['node']->book['depth'];
  $title    = check_plain($vars['node']->title);
  $content  = $vars['node']->rendered; // THIS IS CREATED IN *_whole_node()
  $nid			= $vars['node']->nid;
	$output = '';
	$output .= "<div id=\"book-node-$nid\" class=\"book-section section-$depth\">\n";
  $output .= "<h2 class=\"book-heading\">$title</h2>\n";  
  $output .= drupal_render($vars['editmenu']) . "\n";
  $output .= $content . "\n";
  $output .= $vars['children'] . "\n";
	$output .= "</div>\n";	
	return $output;
}

/*
function theme_whole_toc_html($vars) {
	// Should build the TOC here and call in shanti_texts_whole_toc() below
	// so you can override this in a theme. Need to register with hook_theme
	// first. Vars: depth, prev_depth, nid, title, has_next
}
*/

function shanti_texts_get_whole_book($book) {
  $bid = $book['bid'];
  $shanti_texts_data_book = &drupal_static(__FUNCTION__);
  if (!isset($shanti_texts_data_book[$bid])) {
    if ($cache = cache_get('shanti_texts_data_book' . $bid)) {
      $shanti_texts_data_book[$bid] = $cache->data;
    }
    else {
      $tree = book_menu_subtree_data($book);
      $shanti_texts_data_book[$bid] = book_export_traverse($tree, 'shanti_texts_whole_node');
      cache_set('shanti_texts_data_book' . $bid, $shanti_texts_data_book[$bid], 'cache');
    }
  }
  return $shanti_texts_data_book;
}

function shanti_texts_get_whole_toc($book) {
  $bid = $book['bid'];
  $shanti_texts_data_toc = &drupal_static(__FUNCTION__);
  if (!isset($shanti_texts_data_toc[$bid])) {
    if ($cache = cache_get('shanti_texts_data_toc' . $bid)) {
      $shanti_texts_data_toc[$bid] = $cache->data;
    }
    else {
      $tree = book_menu_subtree_data($book);
      $shanti_texts_data_toc[$bid] = book_export_traverse($tree, 'shanti_texts_whole_toc');
      cache_set('shanti_texts_data_toc' . $bid, $shanti_texts_data_toc[$bid], 'cache');
    }
  }
  return $shanti_texts_data_toc;
}

/**
 * This does most of the heavy lifting. Note that is could be replaced by 
 * a Panel, with views for the TOC and Content parts.
 */
function shanti_texts_preprocess_node(&$vars) {

  if ($vars['type'] == 'book' && $vars['teaser'] == FALSE) {
    
  	// If not top of book, redirect to the book
    $nid = $vars['nid'];
    $bid = $vars['book']['bid'];
    if (!$bid) { drupal_set_message("This is not a book yet!"); }
    elseif ($bid != $nid) { drupal_goto("node/$bid", array('fragment' => "book-node-$nid")); }
    $top_mlid = $vars['book']['p1'];
    
    // Get the TOC and combined body
    $book = $vars['book'];
    $shanti_texts_data_book = shanti_texts_get_whole_book($book);
    $book_body_rendered = $shanti_texts_data_book[$bid]; 
    $shanti_texts_data_toc = shanti_texts_get_whole_toc($book);
    $book_toc_rendered = $shanti_texts_data_toc[$bid]; 
    
    // Highlight search hits
    if (isset($_GET['s'])) {
    	$s = $_GET['s'];
    	$book_body_rendered = preg_replace_callback(
    	  "/($s)/i",
    	  function($match) use (&$count) {
    	    $count++; 
    	    return "<span id='shanti-texts-search-hit-{$count}' "
    	      . "class='shanti-texts-search-hit'>$match[1]</span>";
    	  },
    	  $book_body_rendered,-1,$count
    	);
    }
    
		// Create the Meta element
		// THIS IS WHY THE EMBED POPOVERS STAY THE SAME
		// ANOTHER DEPENDENCY: KMaps Fields .... Will be better when you create your own Content Type
		// $kmap_terms = $vars['field_kmap_term'][$vars['language']]; // This does not honor the field display settings
		$terms_build = node_view($vars['node'], 'metadata'); // DEPENDENCY: view_mode 'metadata'
		unset($terms_build['#theme']); 
		hide($terms_build['title']);
		hide($terms_build['links']);
		hide($terms_build['group_content_access']);
		hide($terms_build['field_general_featured_image']); // CCK dependency
		hide($terms_build['field_book_content']); // CCK dependency
		// Try using field_view_field() instead of the above?
    
    $vars['content']['shanti_texts_container'] = array(
    	'#type' => 'container',
    	'#attributes' => array('id' => 'shanti-texts-container'),
    );
    $vars['content']['shanti_texts_container']['body'] = array(
    	'#type'   => 'markup',
    	'#prefix' => '<div id="shanti-texts-body">',
    	'#markup' => $book_body_rendered,
    	'#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar'] = array(
			'#type' => 'container',
			'#attributes' => array('id' => 'shanti-texts-sidebar', 'role' => 'tabpanel'), // Set to hidden in CSS 
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabs'] = array(
      '#type' => 'ul',  
    	'#theme' => 'item_list',
    	'#attributes' => array('id' => 'shanti-texts-sidebar-tabs', 'role' => 'tablist', 'class' => array('nav','nav-tabs','nav-justified')),
    	'#items' => array(
    		array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-toc" role="tab" data-toggle="tab" aria-expanded="true">Contents</a>'),
    		array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-meta" role="tab" data-toggle="tab">Description</a>'),
    		array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-links" role="tab" data-toggle="tab">Views</a>'),
      ),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent'] = array(
    	'#type' => 'container',
    	'#attributes' => array('class' => array('tab-content')),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['toc'] = array(
    	'#type' 	=> 'markup',
    	'#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-toc"><ul>',
    	'#markup' => $book_toc_rendered,
    	'#suffix' => '</ul></div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['meta'] = array(
    	'#type' 	=> 'markup',
    	'#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-meta"><div class="book-title">' . $book['title'] . '</div>',
    	'#markup' => drupal_render($terms_build), 
    	'#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links'] = array(
    	'#type' => 'container',
    	'#attributes' => array('id' => 'shanti-texts-links', 'class' => array('links','tab-pane'), 'role' => 'tabpanel'),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['title'] = array(
			'#markup' => '<div class="book-title">' . $book['title'] . '</div>',
		);
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['list'] = array(
    	'#theme' => 'item_list',
    	'#type' => 'ul',
    	'#items' => array(
    		l(t('View in PubReader'),	"book_pubreader/$bid", array('attributes' => array('class' => array(), 'title' => 'View book in NIH PubReader'))),
    		l(t('View in Voyant'), "shanti_texts/voyant/$bid", array('attributes'  => array('class' => array(), 'title' => 'View book in Voyant tools', 'target' => '_blank'))),
    	),
    );
        
    // Add CSS and JS
    $js_settings = array(
      'book' 				=> $vars['book'],
      'book_title' 	=> $vars['book']['link_title'],
      'kwic_n'			=> isset($_GET['n']) ? $_GET['n'] : 0,  
    );
    
    $vars['content']['shanti_texts_container']['#attached'] = array(
    	'js' => array(
    		SHANTI_TEXTS_PATH . '/js/shanti_texts.js' => array('type' => 'file'),
    		SHANTI_TEXTS_PATH . '/js/jquery.localscroll.min.js' => array('type' => 'file'),
    		SHANTI_TEXTS_PATH . '/js/jquery.scrollTo.min.js' => array('type' => 'file'),
    		array('data' => array('shantiTexts' => $js_settings), 'type' => 'setting'),
    	),
    	'css' => array(
    		SHANTI_TEXTS_PATH . '/css/shanti_texts.css',
    		SHANTI_TEXTS_PATH . '/css/shanti_texts_footnotes.css',
    	),
    );
    
    foreach(array_keys($vars['content']) as $k) {
      if ($k != 'shanti_texts_container') {
        unset($vars['content'][$k]);
      }      
    }
    unset($vars['submitted']); 
        
  }
}

// Actually had to create these by hand in the site
function shanti_texts_entity_info_alter(&$info) {
  $info['node']['view modes']['whole'] = array(
		'label' => t('Whole'),
		'custom settings' => TRUE,
	);
  $info['node']['view modes']['metadata'] = array(
		'label' => t('Metadata'),
		'custom settings' => TRUE,
	);
  $info['node']['view modes']['embed'] = array(
		'label' => t('Embed'),
		'custom settings' => TRUE,
  );
}

function shanti_texts_node_view_alter(&$build) {
	// Does not work -- popover remains the same!
	if ($build['#view_mode'] == 'embed') {
		unset($build['#contextual_links']);
		$sql = "SELECT field_name FROM {field_config} WHERE type = 'shanti_kmaps_fields_default'";
		$rs = db_query($sql);
		while ($r = $rs->fetchObject()) {
			if (array_key_exists($r->field_name,$build)) {
				foreach ($build[$r->field_name] as $i => $inf) {
					if (is_numeric($i)) {
						foreach ($inf['info_popover']['#links'] as $key => $val) {
							if (preg_match("/Related Texts/", $key)) {
								$kid = $build[$r->field_name]['#items'][$i]['id'];
								$domain = $build[$r->field_name]['#items'][$i]['domain'];
								$href = preg_replace("/__KMAPID__/", $kid .'/texts', variable_get('shanti_kmaps_admin_server_'.$domain.'_explorer'));
								$build[$r->field_name][$i]['info_popover']['#links'][$key]['href'] = $href;
								$build[$r->field_name][$i]['info_popover']['#links'][$key]['external'] = 1;
							}
						}
					}
				}			
			}
		}		
	}
}


/**
 * Called by book_export_traverse() above to generate the content of the page.
 * May want to rewrite; this was just copied and heavilty modified
 * from the book module's print function. I really don't understand it at this
 * point.
 */ 
function shanti_texts_whole_node($node, $children = '') {
  $build = node_view($node, 'whole'); // Depends on view mode define in info_alter hook
  $node->rendered = drupal_render($build['field_book_content']); // DEPENDS ON CONTENT TYPE
  $nid = $node->nid;
  $editmenu = array(
    '#type' => 'container',
    '#access' => user_access('add content to books'),
    '#attributes' => array('class' => array('book-edit-menu')),
    'toc-edit-page' => array(
      '#markup'   => l(
        '<span class="glyphicon glyphicon-edit"></span>',
        "node/$nid/edit",
        array(
          'html' => TRUE, 
          'query' => array('destination' => current_path()),
          'fragment' => "node-$nid",
          'attributes' => array('title' => t('Edit this page')),
          // Above does not work. May need to define a menu path that calls drupal_goto() 
        )
      ),
    ),
    'toc-add-child-page' => array(
      '#markup' => l(
        '<span class="glyphicon glyphicon-plus"></span>',
        "node/add/book",
        array(
          'html' => TRUE,
          'query' => array('parent' => $node->book['mlid']),
          'attributes' => array('title' => t('Add a child page')),
        )
      ),
    )
  );

  $new_build = array(
    '#theme' 		=> 'whole_node_html',
    '#node' 		=> $node,
    '#children' => $children,
    '#editmenu' => $editmenu,
  );
  return drupal_render($new_build);
}

/**
 * Also called by book_export_traverse() to generate a table of contents.
 * This is a hand-made function that might be replaced by something more Drupally.
 * I don't understand how the $children argument works at this point.
 * Should name space the class names and use a render array.
 */
function shanti_texts_whole_toc($node, $children = '') {
    $output = '';
    $nid 		= $node->nid;
    $title 	= check_plain($node->title);
    $depth 	= $node->book['depth'];
    
    if ($prev = book_prev($node->book)) {
      $x = $depth - $prev['depth'];
      //if ($x == 0) '' // Same level
      if ($x > 0) $output .= "<ul class='level-{$prev['depth']}'>\n"; // $x should never be > 1
      elseif ($x < 0) {
        for ($i = 0; $i > $x; $i--) {
          $output .= "</ul>\n"; 
        }
      }
    }
    
		$output .= "<li class='toc-item-node' id='toc-item-node-$nid'><a href='#book-node-$nid'>$title</a></li>\n";
  	
    if ($next = book_next($node->book)) {
      // Do nothing
    } else {
      // Clean up ..
      for ($i = 0; $i < ($depth - 1); $i++) {
        $output .= "</ul>\n";         
      }
    }
    
    $output .= $children;
    return $output;
}
