<?php 

define('SHANTI_TEXTS_PATH', drupal_get_path('module','shanti_texts'));

function shanti_texts_help($path, $arg) {
  if ($path == "admin/help#shanti_texts") {
    return '<p>' . t('SHANTI Texts help is not currently available.') . '</p>';
  }
}

function shanti_texts_enable() {
  drupal_set_message($message = t('SHANTI Texts activated.'), $type = 'status');
  drupal_theme_rebuild();
}

function shanti_texts_menu() {
  return array(
    'shanti_texts' => array(
      'page callback' => 'shanti_texts_default',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/voyant/%' => array(
      'page callback' => 'shanti_texts_voyant',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax/%' => array(
      'page callback' => 'shanti_texts_node_ajax',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax_text/%' => array(
      'page callback' => 'shanti_texts_node_ajax_text',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_embed/%' => array(
      'page callback' => 'shanti_texts_node_embed',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_json/%' => array(
      'page callback' => 'shanti_texts_node_json',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),    
    ),
    'admin/content/book/shanti_texts' => array(
      'title' => 'SHANTI Texts',
      'page callback' => 'shanti_texts_admin_page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
      'access arguments' => array('administer shanti texts'),             
    ),
    'admin/shanti_texts/rebuild' => array(
      'page callback' => 'shanti_texts_admin_rebuild_page',
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer shanti texts'),        
    ),
  );
}

function shanti_texts_permission() {
  return array(
    'administer shanti texts' => array(
      'title' => t('Administer SHANTI Texts'),
      'description' => t('Perform administration tasks for SHANTI Texts.'),
    ),
  );
}

/**
* Menu Callbacks
*/

function shanti_texts_default() {
  drupal_goto("<front>"); // Redirect to front page
}

function shanti_texts_voyant($nid) {
  global $base_url;
  $url = "http://voyeurtools.org";
  drupal_goto($url,array('external' => TRUE,  'query' => array('input' => "$base_url/shanti_texts/node_ajax_text/$nid")));
}

function shanti_texts_node_ajax($nid) {
  drupal_goto("shanti_texts/node_embed/$nid");
}

function shanti_texts_node_ajax_text($nid) {
  $node = node_load($nid);
  $content = shanti_texts_get_whole_book($node->book);
  print $content[$nid];
}

function shanti_texts_node_embed($nid) {
  drupal_add_css(SHANTI_TEXTS_PATH . '/css/shanti_texts_embed.css');
  $node = node_load($nid);
  $build = node_view($node,'embed');
  return $build;
}

function shanti_texts_node_json($nid) {
  $node = node_load($nid);
  print ajax_render($node);
}

function shanti_texts_admin_page() {
  $build = array(
    '#type' => 'container',
    '#prefix' => ('<h2>SHANTI Texts Admin Page</h2>'),
    'actions' => array(
      '#type' => 'ul',
      '#theme' => 'item_list',
      '#attributes' => array(),
      '#items' => array(
        array('data' => l('Rebuild texts (run this after clearing the cache)','admin/shanti_texts/rebuild')),
      ),
    ),
  );
  return $build;
}

function shanti_texts_admin_rebuild_page() {
  $batch = array(
    'operations' => array(
      array('shanti_texts_rebuild_books', array()),
    ),
    'finished'          => 'shanti_texts_rebuilder_finished',
    'title'             => t('SHANTI Texts Rebuilder'),
    'init_message'      => t('Rebuilder is starting.'),
    //'progress_message'  => t('Processed @current out of @total batch operations.'),
    'progress_message'  => t('Attempting to rebuild all texts.'),
    'error_message'     => t('SHANTI Texts Rebuilder has encountered an error.'),    
  );
  batch_set($batch);
  batch_process("admin/content/book/shanti_texts");
}

function shanti_texts_rebuild_books(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $rs = db_query("SELECT bid FROM {book} WHERE bid = nid");
    while ($r = $rs->fetchObject()) { $context['results']['bids'][] = $r->bid; }
    $context['results']['max'] = count($context['results']['bids']);
    $context['results']['processed'] = 0;
  }
  $count = 10;
  $bid_count = count($context['results']['bids']);
  if ($bid_count < $count) { $count = $bid_count; }
  $context['message'] = t("Rebuilt " . $context['sandbox']['progress'] . " of " . $context['results']['max'] . " texts.");
  for ($i = 0; $i < $count; $i++) {
    $bid = array_shift($context['results']['bids']); 
		shanti_texts_clear_cache_text($bid, true, false);
    $context['sandbox']['current_node'] = $bid;
    $context['sandbox']['progress']++;
    $context['results']['processed']++;
  }
  if ($context['sandbox']['progress'] != $context['results']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['results']['max'];
  } 
}

function shanti_texts_rebuilder_finished($success, $results, $operations) {
  if ($success) {
    $message = $results['processed'] . ' of ' . $results['max'] . ' nodes rebuilt.';
    drupal_set_message($message);
  } else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}

/**
 * This template is called by the visit function used by
 * book_export_traverse() use throughout the module
 */
function shanti_texts_theme($existing, $type, $theme, $path) {
  return array(
    'whole_node_html' => array(
      'variables' => array('node' => NULL, 'children' => NULL, 'editmenu' => NULL),
    ),
  );
}

function shanti_texts_menu_alter(&$items) { 
  $items['node/%node/reorder']['title'] = 'Sort Text Sections';
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'shanti_texts_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
}

function shanti_texts_edit_tab_title($node) {
  if ($node->type == 'book') {
    return t('Edit Top Text Section');
  }
  return t('Edit');
}

function shanti_texts_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'book_admin_edit') {
    $form['save']['#value'] = 'Save text sections';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';
  } 
  elseif ($form_id == 'book_node_form') {
    $form['actions']['submit']['#value']  = 'Save text section';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';  
  } 
}

function shanti_texts_book_submit_callback($form, &$form_state) {
  // Hack? At least check of bid exists ...
  $bid = $form_state['build_info']['args'][0]->book['bid']; 
  shanti_texts_clear_cache_text($bid, true);  
}

function shanti_texts_clear_cache_text($bid, $rebuild = false, $debug = false) {
	$message = '';
	if ($bid) {
    cache_clear_all('shanti_texts_data_book' . $bid, 'cache');
    cache_clear_all('shanti_texts_data_toc' . $bid, 'cache');
		$message .= "All caches cleared for this text";
		if ($rebuild) {
			$node = node_load($bid);
			$book = $node->book;
			shanti_texts_get_whole_book($book);
			shanti_texts_get_whole_toc($book);
			$message .= "  and text rebuilt";
		}
	}
	else {
		$message = 'No book defined.';	
	}
	if ($debug) {
		drupal_set_message($message.".");
	}
}

function shanti_texts_node_insert($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid'], true);
  }  
}

function shanti_texts_node_update($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid'], true);
  }
}

function shanti_texts_node_delete($node) {
  if ($node->type == 'book') {
    shanti_texts_clear_cache_text($node->book['bid'], false);
  }
}

function theme_whole_node_html($vars) {
  $depth    = $vars['node']->book['depth'];
  $title    = check_plain($vars['node']->title);
  $content  = $vars['node']->rendered; // THIS IS CREATED IN *_whole_node()
  $nid      = $vars['node']->nid;
  $output   = '';
  $output  .= "<div id=\"book-node-$nid\" class=\"book-section section-$depth\">\n";
  $output  .= "<h2 class=\"book-heading\">$title</h2>\n";  
  $output  .= drupal_render($vars['editmenu']) . "\n";
  $output  .= $content . "\n";
  $output  .= $vars['children'] . "\n";
  $output  .= "</div>\n"; 
  return $output;
}

/*
function theme_whole_toc_html($vars) {
  // Should build the TOC here and call in shanti_texts_whole_toc() below
  // so you can override this in a theme. Need to register with hook_theme
  // first. Vars: depth, prev_depth, nid, title, has_next
}
*/

function shanti_texts_get_whole_book($book) {
  $bid = $book['bid'];    
  $shanti_texts_data_book = &drupal_static(__FUNCTION__);
  if (!isset($shanti_texts_data_book[$bid])) {
    if ($cache = cache_get('shanti_texts_data_book' . $bid)) {
      $shanti_texts_data_book[$bid] = $cache->data;
    }
    else {
      $tree = book_menu_subtree_data($book);
      $shanti_texts_data_book[$bid] = book_export_traverse($tree, 'shanti_texts_whole_node');
      cache_set('shanti_texts_data_book' . $bid, $shanti_texts_data_book[$bid], 'cache');
    }
  }
  return $shanti_texts_data_book;
}

function shanti_texts_get_whole_toc($book) {
  $bid = $book['bid'];
  $shanti_texts_data_toc = &drupal_static(__FUNCTION__);
  if (!isset($shanti_texts_data_toc[$bid])) {
    if ($cache = cache_get('shanti_texts_data_toc' . $bid)) {
      $shanti_texts_data_toc[$bid] = $cache->data;
    }
    else {
      $tree = book_menu_subtree_data($book);
      $shanti_texts_data_toc[$bid] = book_export_traverse($tree, 'shanti_texts_whole_toc');
      cache_set('shanti_texts_data_toc' . $bid, $shanti_texts_data_toc[$bid], 'cache');
    }
  }
  return $shanti_texts_data_toc;
}

/**
 * This does most of the heavy lifting. Note that this could be replaced by 
 * a Panel, with views for the TOC and Content parts.
 */
function shanti_texts_preprocess_node(&$vars) {

  if ($vars['type'] == 'book' && $vars['teaser'] == FALSE) {
    
    // If not top of book, redirect to the book
    $nid = $vars['nid'];
    $bid = $vars['book']['bid'];
    if (!$bid) { drupal_set_message("This is not a book yet!"); }
    elseif ($bid != $nid) { 
    	$s = '';
	  	if (array_key_exists('s',$_GET)) { $s = $_GET['s']; }
    	drupal_goto("node/$bid", array('query' => array('s' => $s), 'fragment' => "book-node-$nid")); 
	  }
    $top_mlid = $vars['book']['p1'];

    // Get the combined body and TOC
    $book = $vars['book'];
    $shanti_texts_data_book = shanti_texts_get_whole_book($book);
    $shanti_texts_data_toc 	= shanti_texts_get_whole_toc($book);
    $book_body_rendered 		= $shanti_texts_data_book[$bid]; 
    $book_toc_rendered 			= $shanti_texts_data_toc[$bid];
        
    // Get metadata section -- note, no view mode here
    hide($vars['content']['comments']);
    hide($vars['content']['links']);
    hide($vars['content']['book_navigation']);
    hide($vars['content']['field_book_content']);
    $book_meta_rendered = render($vars['content']);

    // Highlight search hits
    // May want to add parameters for substring searching or not --
    // basically expose some regex options
    if (isset($_GET['s']) && !preg_match("/^\s*$/",$_GET['s'])) {
      $s = $_GET['s'];
      $book_body_rendered = preg_replace_callback(
        "/($s)/i",
        function($match) use (&$count) {
          $count++; 
          return "<span id='shanti-texts-search-hit-{$count}' "
            . "class='shanti-texts-search-hit'>$match[1]</span>";
        },
        $book_body_rendered,-1,$count
      );
    }
    
		// Build the render array for the page
		
    $vars['content']['shanti_texts_container'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-container'),
    );
    $vars['content']['shanti_texts_container']['body'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div id="shanti-texts-body">',
      '#markup' => $book_body_rendered,
      '#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-sidebar', 'role' => 'tabpanel'), // Set to hidden in CSS 
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabs'] = array(
      '#type' => 'ul',  
      '#theme' => 'item_list',
      '#attributes' => array('id' => 'shanti-texts-sidebar-tabs', 'role' => 'tablist', 'class' => array('nav','nav-tabs','nav-justified')),
      '#items' => array(
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-toc" role="tab" data-toggle="tab" aria-expanded="true">Contents</a>'),
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-meta" role="tab" data-toggle="tab">Description</a>'),
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-links" role="tab" data-toggle="tab">Views</a>'),
      ),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('tab-content')),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['toc'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-toc"><ul>',
      '#markup' => $book_toc_rendered,
      '#suffix' => '</ul></div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['meta'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-meta"><div class="book-title">' . $book['title'] . '</div>',
      '#markup' => $book_meta_rendered, 
      '#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-links', 'class' => array('links','tab-pane'), 'role' => 'tabpanel'),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['title'] = array(
      '#markup' => '<div class="book-title">' . $book['title'] . '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['list'] = array(
      '#theme' => 'item_list',
      '#type' => 'ul',
      '#items' => array(
        l(t('View in PubReader'), "book_pubreader/$bid", array('attributes' => array('class' => array(), 'title' => 'View book in NIH PubReader', 'target' => '_blank'))),
        l(t('View in Voyant'), "shanti_texts/voyant/$bid", array('attributes'  => array('class' => array(), 'title' => 'View book in Voyant tools', 'target' => '_blank'))),
      ),
    );
        
    // Add CSS and JS
    $js_settings = array(
      'book'        => $vars['book'],
      'book_title'  => $vars['book']['link_title'],
      'kwic_n'      => isset($_GET['n']) ? $_GET['n'] : 0,  
      'edit_rights'	=> user_access('add content to books') && user_access('create new books'),
    );
    
    $vars['content']['shanti_texts_container']['#attached'] = array(
      'js' => array(
        SHANTI_TEXTS_PATH . '/js/shanti_texts.js' => array('type' => 'file'),
        SHANTI_TEXTS_PATH . '/js/jquery.localscroll.min.js' => array('type' => 'file'),
        SHANTI_TEXTS_PATH . '/js/jquery.scrollTo.min.js' => array('type' => 'file'),
        array('data' => array('shantiTexts' => $js_settings), 'type' => 'setting'),
      ),
      'css' => array(
        SHANTI_TEXTS_PATH . '/css/shanti_texts.css',
        SHANTI_TEXTS_PATH . '/css/shanti_texts_footnotes.css',
      ),
    );
    
    foreach(array_keys($vars['content']) as $k) {
      if ($k != 'shanti_texts_container') {
        unset($vars['content'][$k]);
      }      
    }
    unset($vars['submitted']); 
        
  }
}

// Actually had to create these by hand in the site
function shanti_texts_entity_info_alter(&$info) {
  $info['node']['view modes']['whole'] = array(
    'label' => t('Whole Book'),
    'custom settings' => TRUE,
  );
  $info['node']['view modes']['embed'] = array(
    'label' => t('Embedded'),
    'custom settings' => TRUE,
  );
}

/**
 * Called by book_export_traverse() above to generate the content of the page.
 * May want to rewrite; this was just copied and heavilty modified
 * from the book module's print function. I really don't understand it at this
 * point.
 */ 
function shanti_texts_whole_node($node, $children = '') {

  $build = node_view($node, 'whole'); // Depends on the view mode defined in info_alter hook  
  
	//$node->rendered = render($build['field_book_content']); // DEPENDS ON CONTENT TYPE!
	// drupal_render() above is adding a ton of spurious p tags!
	// So, we replace it with this:
  $node->rendered = check_markup($build['field_book_content']['#items'][0]['value'],'full_html');
  
  	
  $nid = $node->nid;
  $editmenu = NULL;
	$editmenu = array(
		'#type' => 'container',
		'#access' => user_access('add content to books'),
		'#attributes' => array('class' => array('book-edit-menu')),
		'toc-edit-page' => array(
			'#markup'   => l(
				'<span class="glyphicon glyphicon-edit"></span>',
				"node/$nid/edit",
				array(
					'html' => TRUE, 
					'query' => array('destination' => current_path()),
					'fragment' => "node-$nid",
					'attributes' => array('title' => t('Edit this page')),
					// Above does not work. May need to define a menu path that calls drupal_goto() 
				)
			),
		),
		'toc-add-child-page' => array(
			'#markup' => l(
				'<span class="glyphicon glyphicon-plus"></span>',
				"node/add/book",
				array(
					'html' => TRUE,
					'query' => array('parent' => $node->book['mlid']),
					'attributes' => array('title' => t('Add a child page')),
				)
			),
		)
	);

  $new_build = array(
    '#theme'    => 'whole_node_html',
    '#node'     => $node,
    '#children' => $children,
    '#editmenu' => $editmenu,
  );
  return drupal_render($new_build);
}

/**
 * Also called by book_export_traverse() to generate a table of contents.
 * This is a hand-made function that might be replaced by something more Drupally.
 * I don't understand how the $children argument works at this point.
 * Should name space the class names and use a render array.
 */
function shanti_texts_whole_toc($node, $children = '') {
    $output = '';
    $nid    = $node->nid;
    $title  = check_plain($node->title);
    $depth  = $node->book['depth'];
    
    if ($prev = book_prev($node->book)) {
      $x = $depth - $prev['depth'];
      //if ($x == 0) '' // Same level
      if ($x > 0) $output .= "<ul class='level-{$prev['depth']}'>\n"; // $x should never be > 1
      elseif ($x < 0) {
        for ($i = 0; $i > $x; $i--) {
          $output .= "</ul>\n"; 
        }
      }
    }
    
    $output .= "<li class='toc-item-node' id='toc-item-node-$nid'><a href='#book-node-$nid'>$title</a></li>\n";
    
    if ($next = book_next($node->book)) {
      // Do nothing
    } else {
      // Clean up ..
      for ($i = 0; $i < ($depth - 1); $i++) {
        $output .= "</ul>\n";         
      }
    }
    
    $output .= $children;
    return $output;
}
