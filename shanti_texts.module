<?php 

define('SHANTI_TEXTS_PATH', drupal_get_path('module','shanti_texts'));

function shanti_texts_help($path, $arg) {
  if ($path == "admin/help#shanti_texts") {
    return '<p>' . t('SHANTI Texts help is not currently available.') . '</p>';
  }
}

function shanti_texts_enable() {
  drupal_set_message($message = t('SHANTI Texts activated.'), $type = 'status');
  drupal_theme_rebuild();
}

function shanti_texts_menu() {
  return array(
    'shanti_texts' => array(
      'page callback' => 'shanti_texts_default',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/voyant/%' => array(
      'page callback' => 'shanti_texts_voyant',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax/%' => array(
      'page callback' => 'shanti_texts_node_ajax',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_ajax_text/%' => array(
      'page callback' => 'shanti_texts_node_ajax_text',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_embed/%' => array(
      'page callback' => 'shanti_texts_node_embed',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access', 
      'access arguments' => array('access content'),
    ),
    'shanti_texts/node_json/%' => array(
      'page callback' => 'shanti_texts_node_json',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),    
    ),
    'admin/content/book/shanti_texts' => array(
      'title' => 'SHANTI Texts',
      'page callback' => 'shanti_texts_admin_page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
      'access arguments' => array('administer shanti texts'),             
    ),
  );
}

function shanti_texts_permission() {
  return array(
    'administer shanti texts' => array(
      'title' => t('Administer SHANTI Texts'),
      'description' => t('Perform administration tasks for SHANTI Texts.'),
    ),
  );
}

/**
* Menu Callbacks
*/

function shanti_texts_default() {
  drupal_goto("<front>"); // Redirect to front page
}

function shanti_texts_voyant($nid) {
  global $base_url;
  $url = "http://voyeurtools.org";
  drupal_goto($url,array('external' => TRUE,  'query' => array('input' => "$base_url/shanti_texts/node_ajax_text/$nid")));
}

function shanti_texts_node_ajax($nid) {
  drupal_goto("shanti_texts/node_embed/$nid");
}

function shanti_texts_node_ajax_text($nid) {
  $node = node_load($nid);
  print views_embed_view('single_text_body','panel_pane_default',$node->book['bid']);
}

function shanti_texts_node_embed($nid) {
  drupal_add_css(SHANTI_TEXTS_PATH . '/css/shanti_texts_embed.css');
  $node = node_load($nid);
  $build = node_view($node,'embed');
  return $build;
}

function shanti_texts_node_json($nid) {
  $node = node_load($nid);
  print ajax_render($node);
}

function shanti_texts_admin_page() {
  $build = array(
    '#type' => 'container',
    '#prefix' => ('<h2>SHANTI Texts Admin Page</h2>'),
    /*
    'actions' => array(
      '#type' => 'ul',
      '#theme' => 'item_list',
      '#attributes' => array(),
      '#items' => array(
        array('data' => l('Rebuild texts (run this after clearing the cache)','admin/shanti_texts/rebuild')),
      ),
    ),
	*/
  );
  return $build;
}

function shanti_texts_menu_alter(&$items) { 
  $items['node/%node/reorder']['title'] = 'Sort Text Sections';
  unset($items['node/%node/edit']['title']);
  $items['node/%node/edit']['title callback'] = 'shanti_texts_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);
}

function shanti_texts_edit_tab_title($node) {
  if ($node->type == 'book') {
  	if ($node->book['nid'] == $node->book['bid']) {
	    return t('Edit Top Section');
	  }
	  else {
	    return t('Edit Child Section');	  
	  }
  }
  return t('Edit');
}

function shanti_texts_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'book_admin_edit') {
    $form['save']['#value'] = 'Save text sections';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';
  } 
  elseif ($form_id == 'book_node_form') {
    $form['actions']['submit']['#value']  = 'Save text section';
    $form['#submit'][] = 'shanti_texts_book_submit_callback';  
    // Check if this is the form for a book child page
    // If so, hide some things
    // DEPENDENCY ALERT -- Hidden fields and groups here are hand made in content type def!
    $nid = $form['nid']['#value'];
    $bid = $form['#node']->book['bid'];
    if ($nid != $bid) {
      hide($form['field_og_collection_ref']);       	
      hide($form['field_general_featured_image']);
      field_group_hide_field_groups($form, array('group_collection','group_book_metadata','group_book_admin'));
    }
  } 
}

function shanti_texts_node_insert($node) {
  if ($node->type == 'book') {
    _shanti_texts_book_update_or_insert($node,'insert');
  }  
}

function shanti_texts_node_update($node) {
  if ($node->type == 'book') {
    _shanti_texts_book_update_or_insert($node,'update');
  }
}

# REVIEW THIS -- CONSIDER REPLACING WITH RULES
function _shanti_texts_book_update_or_insert($node,$op) {

  if (empty($node->nid)) {
     // Should not happen at this point (apparently) 
  }
  // Case: Child; set collection to parent's
  elseif ($node->nid != $node->book['bid']) {
    $book = node_load($node->book['bid']);
    $lang = $node->language;
    if (isset($book->field_og_collection_ref)) { // Depends on collection field
      $node->field_og_collection_ref[$lang][0]['target_id'] = $book->field_og_collection_ref[$lang][0]['target_id'];
      field_attach_update('node', $node);      
    }
  }
  // Case: Parent; set childrens' collections to parent's
  elseif ($node->nid == $node->book['bid']) {
    if ($op == 'update') {
      $sql = "SELECT nid FROM {book} WHERE bid = :bid AND nid != bid";
      $rs = db_query($sql,array(':bid' => $node->nid));
      while ($r = $rs->fetchObject()) {
      	$this_node = node_load($r->nid);      
      	$lang = $this_node->language;
      	if (isset($node->field_og_collection_ref)) { // Depends on collection field
      	  $this_node->field_og_collection_ref[$lang][0]['target_id'] = $node->field_og_collection_ref[$lang][0]['target_id'];    
      	  field_attach_update('node', $this_node);
        }    
      }
    }
  }
  else {
    // Do nothing     
  }
}

/**
 * This does most of the heavy lifting. Note that this could be replaced by 
 * a Panel, with views for the TOC and Content parts.
 */
function shanti_texts_preprocess_node(&$vars) {
  
  if ($vars['type'] == 'book' && $vars['teaser'] == FALSE) {
    
    // If not top of book, redirect to the book
    $nid = $vars['nid'];
    $bid = $vars['book']['bid'];
    if (!$bid) { drupal_set_message("This is not a book yet!"); }
    elseif ($bid != $nid) { 
    	$s = '';
	  	if (array_key_exists('s',$_GET)) { $s = $_GET['s']; }
    	drupal_goto("node/$bid", array('query' => array('s' => $s), 'fragment' => "book-node-$nid")); 
	  }
    $top_mlid = $vars['book']['p1'];

    // Get the combined body, TOC, and metadata
    $book = $vars['book'];
    
    // ALL FROM VIEWS !!!
    $book_body_rendered 	= views_embed_view('single_text_body','panel_pane_default',$bid);
	$book_toc_rendered 		= views_embed_view('single_text_toc', 'panel_pane_default',$bid);
    $book_meta_rendered 	= views_embed_view('single_text_meta', 'panel_pane_default',$bid);
	$book_views_rendered 	= views_embed_view('single_text_views', 'panel_pane_default',$bid);

    // Highlight search hits
    // May want to add parameters for substring searching or not --
    // basically expose some regex options
    if (isset($_GET['s']) && !preg_match("/^\s*$/",$_GET['s'])) {
      $s = $_GET['s'];
      $book_body_rendered = preg_replace_callback(
        "/($s)/i",
        function($match) use (&$count) {
          $count++; 
          return "<span id='shanti-texts-search-hit-{$count}' "
            . "class='shanti-texts-search-hit'>$match[1]</span>";
        },
        $book_body_rendered,-1,$count
      );
    }
    
	// Build the render array for the page
	// NOTE THAT THIS HARD CODES BOOTSTRAP -- SHOULD DO THIS DIFFERENTLY		
    $vars['content']['shanti_texts_container'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-container'),
    );
    $vars['content']['shanti_texts_container']['body'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div id="shanti-texts-body">',
      '#markup' => $book_body_rendered,
      '#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-sidebar', 'role' => 'tabpanel'), // Set to hidden in CSS 
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabs'] = array(
      '#type' => 'ul',  
      '#theme' => 'item_list',
      '#attributes' => array('id' => 'shanti-texts-sidebar-tabs', 'role' => 'tablist', 'class' => array('nav','nav-tabs','nav-justified')),
      '#items' => array(
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-toc" role="tab" data-toggle="tab" aria-expanded="true">Contents</a>'),
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-meta" role="tab" data-toggle="tab">Description</a>'),
        array('class' => '', 'role' => 'presentation', 'data' => '<a href="#shanti-texts-links" role="tab" data-toggle="tab">Views</a>'),
      ),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('tab-content')),
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['toc'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-toc"><ul>',
      '#markup' => $book_toc_rendered,
      '#suffix' => '</ul></div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['meta'] = array(
      '#type'   => 'markup',
      '#prefix' => '<div role="tabpanel" class="tab-pane" id="shanti-texts-meta">', #<div class="book-title">' . $book['title'] . '</div>',
      '#markup' => $book_meta_rendered, 
      '#suffix' => '</div>',
    );
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links'] = array(
      '#type' => 'container',
      '#attributes' => array('id' => 'shanti-texts-links', 'class' => array('links','tab-pane'), 'role' => 'tabpanel'),
    );
    #$vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['title'] = array(
    #  '#markup' => '<div class="book-title">' . $book['title'] . '</div>',
    #);
    $vars['content']['shanti_texts_container']['sidebar']['tabcontent']['links']['list'] = array(
    	'#type' => 'markup',
    	'#markup' => $book_views_rendered,
      #'#theme' => 'item_list',
      #'#type' => 'ul',
      #'#items' => array(
      #  l(t('View in PubReader'), "book_pubreader/$bid", array('attributes' => array('class' => array(), 'title' => 'View book in NIH PubReader', 'target' => '_blank'))),
      #  l(t('View in Voyant'), "shanti_texts/voyant/$bid", array('attributes'  => array('class' => array(), 'title' => 'View book in Voyant tools', 'target' => '_blank'))),
      #),
    );
        
    // Add CSS and JS
    $js_settings = array(
      'book'        => $vars['book'],
      'book_title'  => $vars['book']['link_title'],
      'kwic_n'      => isset($_GET['n']) ? $_GET['n'] : 0,  
      'edit_rights'	=> user_access('add content to books') && user_access('create new books'),
    );
    
    $vars['content']['shanti_texts_container']['#attached'] = array(
      'js' => array(
        SHANTI_TEXTS_PATH . '/js/shanti_texts.js' => array('type' => 'file'),
        SHANTI_TEXTS_PATH . '/js/jquery.localscroll.min.js' => array('type' => 'file'),
        SHANTI_TEXTS_PATH . '/js/jquery.scrollTo.min.js' => array('type' => 'file'),
        array('data' => array('shantiTexts' => $js_settings), 'type' => 'setting'),
      ),
      'css' => array(
        SHANTI_TEXTS_PATH . '/css/shanti_texts.css',
        SHANTI_TEXTS_PATH . '/css/shanti_texts_footnotes.css',
      ),
    );
    
    foreach(array_keys($vars['content']) as $k) {
      if ($k != 'shanti_texts_container') {
        unset($vars['content'][$k]);
      }      
    }

    unset($vars['submitted']); 
      
  }
}

